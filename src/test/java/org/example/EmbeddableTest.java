/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import jakarta.persistence.EntityManager;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import org.hibernate.Session;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.sql.PreparedStatement;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

class EmbeddableTest {

    EntityManager em;
    DerOA deroa;
    DerOB derob;
    /**
     * @throws java.lang.Exception
     */
    @BeforeEach
    void setUp() throws Exception {
        DerDB derba1 = new DerDB(5);
        DerDA derda1 = new DerDA("1","abase");
        deroa = new DerOA(derda1);
        derob  = new DerOB(derba1);
        em = setupH2Db("testing");
    }



    @Test void testBaseProperty() {
        em.getTransaction().begin();
        em.persist(deroa);
        em.persist(derob);
        em.getTransaction().commit();
        Integer ida = deroa.getId();
        Integer idb = derob.getId();
        dumpDbData(em,"dump.sql");
        em.clear();
        TypedQuery<DerOA> qa = em.createQuery("select o from DerOA o where o.id =:id", DerOA.class);
        qa.setParameter("id",ida);
        DerOA deroain = qa.getSingleResult();
        assertEquals("abase",deroain.derda.baseprop);

    }

    @Test void testDerivedProperty() {
        em.getTransaction().begin();
        em.persist(deroa);
        em.persist(derob);
        em.getTransaction().commit();
        Integer idb = derob.getId();
        em.clear();

        TypedQuery<DerOB> qb = em.createQuery("select o from DerOB o where o.id =:id", DerOB.class);
        qb.setParameter("id", idb);
        DerOB derobin = qb.getSingleResult();
        assertNotNull(derobin);
        assertEquals(5,derobin.derdb().b);

    }


    protected EntityManager setupH2Db(String puname){
        Map<String, String> props = new HashMap<>();

        props.put("jakarta.persistence.jdbc.url", "jdbc:h2:mem:"+puname+";DB_CLOSE_DELAY=-1");//IMPL differenrt DB for each PU to stop interactions
        props.put("jakarta.persistence.jdbc.driver", "org.h2.Driver");
        props.put("hibernate.dialect", "org.hibernate.dialect.H2Dialect");
        props.put("jakarta.persistence.schema-generation.scripts.create-target", "test.sql");
        props.put("jakarta.persistence.schema-generation.scripts.drop-target", "test-drop.sql");
        props.put("hibernate.hbm2ddl.schema-generation.script.append", "false");

        props.put("jakarta.persistence.schema-generation.create-source", "metadata");
        props.put("jakarta.persistence.schema-generation.database.action", "drop-and-create");
        props.put("jakarta.persistence.schema-generation.scripts.action", "drop-and-create");
        props.put("jakarta.persistence.jdbc.user", "");
        //        props.put(PersistenceUnitProperties.CACHE_SHARED_, "false");


        jakarta.persistence.EntityManagerFactory emf = jakarta.persistence.Persistence.createEntityManagerFactory(puname, props);

       return emf.createEntityManager();

    }
    /**
     * Write the contents of the database to a file.
     * @param em the entity manager for the database.
     * @param filename The name of the file to write the DDL to.
     */
    protected void dumpDbData(jakarta.persistence.EntityManager em, String filename) {
        //IMPL hibernate specific way of getting connection... generally dirty, see  https://stackoverflow.com/questions/3493495/getting-database-connection-in-pure-jpa-setup
        Session sess = em.unwrap(Session.class);
        sess.doWork(conn -> {
            PreparedStatement ps = conn.prepareStatement("SCRIPT TO ?"); // this is H2db specific
            ps.setString(1, filename);
            ps.execute();
        });
    }

}
